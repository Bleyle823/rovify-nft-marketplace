/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace EventTicketNFT {
  export type EventStruct = {
    id: BigNumberish;
    name: string;
    description: string;
    eventDate: BigNumberish;
    ticketPrice: BigNumberish;
    maxSupply: BigNumberish;
    soldTickets: BigNumberish;
    organizer: AddressLike;
    isActive: boolean;
    imageCID: string;
  };

  export type EventStructOutput = [
    id: bigint,
    name: string,
    description: string,
    eventDate: bigint,
    ticketPrice: bigint,
    maxSupply: bigint,
    soldTickets: bigint,
    organizer: string,
    isActive: boolean,
    imageCID: string
  ] & {
    id: bigint;
    name: string;
    description: string;
    eventDate: bigint;
    ticketPrice: bigint;
    maxSupply: bigint;
    soldTickets: bigint;
    organizer: string;
    isActive: boolean;
    imageCID: string;
  };

  export type MarketplaceListingStruct = {
    ticketId: BigNumberish;
    seller: AddressLike;
    price: BigNumberish;
    isActive: boolean;
  };

  export type MarketplaceListingStructOutput = [
    ticketId: bigint,
    seller: string,
    price: bigint,
    isActive: boolean
  ] & { ticketId: bigint; seller: string; price: bigint; isActive: boolean };

  export type TicketStruct = {
    id: BigNumberish;
    eventId: BigNumberish;
    ticketNumber: BigNumberish;
    metadataURI: string;
  };

  export type TicketStructOutput = [
    id: bigint,
    eventId: bigint,
    ticketNumber: bigint,
    metadataURI: string
  ] & {
    id: bigint;
    eventId: bigint;
    ticketNumber: bigint;
    metadataURI: string;
  };
}

export interface EventTicketNFTInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approve"
      | "balanceOf"
      | "buyListedTicket"
      | "buyTicket"
      | "cancelListing"
      | "createEvent"
      | "deactivateEvent"
      | "eventIdCounter"
      | "events"
      | "getActiveListings"
      | "getAllEvents"
      | "getApproved"
      | "getEvent"
      | "getMarketplaceListing"
      | "getTicket"
      | "getTicketsByEventAndOwner"
      | "isApprovedForAll"
      | "listTicket"
      | "marketplaceListings"
      | "name"
      | "owner"
      | "ownerOf"
      | "renounceOwnership"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "supportsInterface"
      | "symbol"
      | "ticketIdCounter"
      | "ticketToEvent"
      | "tickets"
      | "tokenByIndex"
      | "tokenOfOwnerByIndex"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
      | "transferOwnership"
      | "updateTicketMetadata"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "EventCreated"
      | "OwnershipTransferred"
      | "TicketListed"
      | "TicketListingCancelled"
      | "TicketMinted"
      | "TicketSold"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "buyListedTicket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTicket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createEvent",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateEvent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "eventIdCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "events",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveListings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllEvents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEvent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketplaceListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTicket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTicketsByEventAndOwner",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "listTicket",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "marketplaceListings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ticketIdCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ticketToEvent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tickets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTicketMetadata",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyListedTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyTicket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eventIdCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "events", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActiveListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEvent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMarketplaceListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTicket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTicketsByEventAndOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listTicket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketplaceListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ticketIdCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketToEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tickets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTicketMetadata",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EventCreatedEvent {
  export type InputTuple = [
    eventId: BigNumberish,
    name: string,
    organizer: AddressLike,
    ticketPrice: BigNumberish,
    maxSupply: BigNumberish
  ];
  export type OutputTuple = [
    eventId: bigint,
    name: string,
    organizer: string,
    ticketPrice: bigint,
    maxSupply: bigint
  ];
  export interface OutputObject {
    eventId: bigint;
    name: string;
    organizer: string;
    ticketPrice: bigint;
    maxSupply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TicketListedEvent {
  export type InputTuple = [
    ticketId: BigNumberish,
    seller: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [ticketId: bigint, seller: string, price: bigint];
  export interface OutputObject {
    ticketId: bigint;
    seller: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TicketListingCancelledEvent {
  export type InputTuple = [ticketId: BigNumberish, seller: AddressLike];
  export type OutputTuple = [ticketId: bigint, seller: string];
  export interface OutputObject {
    ticketId: bigint;
    seller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TicketMintedEvent {
  export type InputTuple = [
    ticketId: BigNumberish,
    eventId: BigNumberish,
    buyer: AddressLike,
    ticketNumber: BigNumberish
  ];
  export type OutputTuple = [
    ticketId: bigint,
    eventId: bigint,
    buyer: string,
    ticketNumber: bigint
  ];
  export interface OutputObject {
    ticketId: bigint;
    eventId: bigint;
    buyer: string;
    ticketNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TicketSoldEvent {
  export type InputTuple = [
    ticketId: BigNumberish,
    seller: AddressLike,
    buyer: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [
    ticketId: bigint,
    seller: string,
    buyer: string,
    price: bigint
  ];
  export interface OutputObject {
    ticketId: bigint;
    seller: string;
    buyer: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EventTicketNFT extends BaseContract {
  connect(runner?: ContractRunner | null): EventTicketNFT;
  waitForDeployment(): Promise<this>;

  interface: EventTicketNFTInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  buyListedTicket: TypedContractMethod<
    [_ticketId: BigNumberish],
    [void],
    "payable"
  >;

  buyTicket: TypedContractMethod<[_eventId: BigNumberish], [bigint], "payable">;

  cancelListing: TypedContractMethod<
    [_ticketId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createEvent: TypedContractMethod<
    [
      _name: string,
      _description: string,
      _eventDate: BigNumberish,
      _ticketPrice: BigNumberish,
      _maxSupply: BigNumberish,
      _imageCID: string
    ],
    [bigint],
    "nonpayable"
  >;

  deactivateEvent: TypedContractMethod<
    [_eventId: BigNumberish],
    [void],
    "nonpayable"
  >;

  eventIdCounter: TypedContractMethod<[], [bigint], "view">;

  events: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        boolean,
        string
      ] & {
        id: bigint;
        name: string;
        description: string;
        eventDate: bigint;
        ticketPrice: bigint;
        maxSupply: bigint;
        soldTickets: bigint;
        organizer: string;
        isActive: boolean;
        imageCID: string;
      }
    ],
    "view"
  >;

  getActiveListings: TypedContractMethod<[], [bigint[]], "view">;

  getAllEvents: TypedContractMethod<
    [],
    [EventTicketNFT.EventStructOutput[]],
    "view"
  >;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getEvent: TypedContractMethod<
    [_eventId: BigNumberish],
    [EventTicketNFT.EventStructOutput],
    "view"
  >;

  getMarketplaceListing: TypedContractMethod<
    [_ticketId: BigNumberish],
    [EventTicketNFT.MarketplaceListingStructOutput],
    "view"
  >;

  getTicket: TypedContractMethod<
    [_ticketId: BigNumberish],
    [EventTicketNFT.TicketStructOutput],
    "view"
  >;

  getTicketsByEventAndOwner: TypedContractMethod<
    [_eventId: BigNumberish, _owner: AddressLike],
    [bigint[]],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  listTicket: TypedContractMethod<
    [_ticketId: BigNumberish, _price: BigNumberish],
    [void],
    "nonpayable"
  >;

  marketplaceListings: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, boolean] & {
        ticketId: bigint;
        seller: string;
        price: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  ticketIdCounter: TypedContractMethod<[], [bigint], "view">;

  ticketToEvent: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  tickets: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, string] & {
        id: bigint;
        eventId: bigint;
        ticketNumber: bigint;
        metadataURI: string;
      }
    ],
    "view"
  >;

  tokenByIndex: TypedContractMethod<[index: BigNumberish], [bigint], "view">;

  tokenOfOwnerByIndex: TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateTicketMetadata: TypedContractMethod<
    [_ticketId: BigNumberish, _metadataURI: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "buyListedTicket"
  ): TypedContractMethod<[_ticketId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "buyTicket"
  ): TypedContractMethod<[_eventId: BigNumberish], [bigint], "payable">;
  getFunction(
    nameOrSignature: "cancelListing"
  ): TypedContractMethod<[_ticketId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createEvent"
  ): TypedContractMethod<
    [
      _name: string,
      _description: string,
      _eventDate: BigNumberish,
      _ticketPrice: BigNumberish,
      _maxSupply: BigNumberish,
      _imageCID: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deactivateEvent"
  ): TypedContractMethod<[_eventId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "eventIdCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "events"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        boolean,
        string
      ] & {
        id: bigint;
        name: string;
        description: string;
        eventDate: bigint;
        ticketPrice: bigint;
        maxSupply: bigint;
        soldTickets: bigint;
        organizer: string;
        isActive: boolean;
        imageCID: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getActiveListings"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getAllEvents"
  ): TypedContractMethod<[], [EventTicketNFT.EventStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getEvent"
  ): TypedContractMethod<
    [_eventId: BigNumberish],
    [EventTicketNFT.EventStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMarketplaceListing"
  ): TypedContractMethod<
    [_ticketId: BigNumberish],
    [EventTicketNFT.MarketplaceListingStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTicket"
  ): TypedContractMethod<
    [_ticketId: BigNumberish],
    [EventTicketNFT.TicketStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTicketsByEventAndOwner"
  ): TypedContractMethod<
    [_eventId: BigNumberish, _owner: AddressLike],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "listTicket"
  ): TypedContractMethod<
    [_ticketId: BigNumberish, _price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "marketplaceListings"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, boolean] & {
        ticketId: bigint;
        seller: string;
        price: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ticketIdCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ticketToEvent"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "tickets"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, string] & {
        id: bigint;
        eventId: bigint;
        ticketNumber: bigint;
        metadataURI: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenByIndex"
  ): TypedContractMethod<[index: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenOfOwnerByIndex"
  ): TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateTicketMetadata"
  ): TypedContractMethod<
    [_ticketId: BigNumberish, _metadataURI: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "EventCreated"
  ): TypedContractEvent<
    EventCreatedEvent.InputTuple,
    EventCreatedEvent.OutputTuple,
    EventCreatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TicketListed"
  ): TypedContractEvent<
    TicketListedEvent.InputTuple,
    TicketListedEvent.OutputTuple,
    TicketListedEvent.OutputObject
  >;
  getEvent(
    key: "TicketListingCancelled"
  ): TypedContractEvent<
    TicketListingCancelledEvent.InputTuple,
    TicketListingCancelledEvent.OutputTuple,
    TicketListingCancelledEvent.OutputObject
  >;
  getEvent(
    key: "TicketMinted"
  ): TypedContractEvent<
    TicketMintedEvent.InputTuple,
    TicketMintedEvent.OutputTuple,
    TicketMintedEvent.OutputObject
  >;
  getEvent(
    key: "TicketSold"
  ): TypedContractEvent<
    TicketSoldEvent.InputTuple,
    TicketSoldEvent.OutputTuple,
    TicketSoldEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "EventCreated(uint256,string,address,uint256,uint256)": TypedContractEvent<
      EventCreatedEvent.InputTuple,
      EventCreatedEvent.OutputTuple,
      EventCreatedEvent.OutputObject
    >;
    EventCreated: TypedContractEvent<
      EventCreatedEvent.InputTuple,
      EventCreatedEvent.OutputTuple,
      EventCreatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TicketListed(uint256,address,uint256)": TypedContractEvent<
      TicketListedEvent.InputTuple,
      TicketListedEvent.OutputTuple,
      TicketListedEvent.OutputObject
    >;
    TicketListed: TypedContractEvent<
      TicketListedEvent.InputTuple,
      TicketListedEvent.OutputTuple,
      TicketListedEvent.OutputObject
    >;

    "TicketListingCancelled(uint256,address)": TypedContractEvent<
      TicketListingCancelledEvent.InputTuple,
      TicketListingCancelledEvent.OutputTuple,
      TicketListingCancelledEvent.OutputObject
    >;
    TicketListingCancelled: TypedContractEvent<
      TicketListingCancelledEvent.InputTuple,
      TicketListingCancelledEvent.OutputTuple,
      TicketListingCancelledEvent.OutputObject
    >;

    "TicketMinted(uint256,uint256,address,uint256)": TypedContractEvent<
      TicketMintedEvent.InputTuple,
      TicketMintedEvent.OutputTuple,
      TicketMintedEvent.OutputObject
    >;
    TicketMinted: TypedContractEvent<
      TicketMintedEvent.InputTuple,
      TicketMintedEvent.OutputTuple,
      TicketMintedEvent.OutputObject
    >;

    "TicketSold(uint256,address,address,uint256)": TypedContractEvent<
      TicketSoldEvent.InputTuple,
      TicketSoldEvent.OutputTuple,
      TicketSoldEvent.OutputObject
    >;
    TicketSold: TypedContractEvent<
      TicketSoldEvent.InputTuple,
      TicketSoldEvent.OutputTuple,
      TicketSoldEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
